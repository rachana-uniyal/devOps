EXERCISE 2: Create a full pipeline for your NodeJS App
You want the following steps to be included in your pipeline:

Increment version
The application's version and docker image version should be incremented.

Run tests
You want to test the code, to be sure to deploy only working code. When tests fail, the pipeline should abort.

Build docker image with incremented version
Push to Docker repository
Commit to Git
The application version increment must be committed and pushed to a remote Git repository.


Solution:


Create Jenkins Credentials

Create usernamePassword credentials for docker registry called docker-credentials

Create usernamePassword credentials for git repositoriy called gitlab-credentials


Configure Node Tool in Jenkins Configuration

Name should be node, because that's how it's referenced in the below Jenkinsfile in tools block

Install plugin

Install Pipeline Utility Steps plugin. This contains readJSON function, that we will use to read the version from package.json

Jenkinsfile:

pipeline {
    agent any
    tools {
        nodejs "node"
    }
    stages {
        stage('increment version') {
            steps {
                script {
                    # enter app directory, because that's where package.json is located
                    dir("app") {
                        # update application version in the package.json file with one of these release types: patch, minor or major
                        # this will commit the version update
                        npm version minor

                        # read the updated version from the package.json file
                        def packageJson = readJSON file: 'package.json'
                        def version = packageJson.version

                        # set the new version as part of IMAGE_NAME
                        env.IMAGE_NAME = "$version-$BUILD_NUMBER"
                    }

                    # alternative solution without Pipeline Utility Steps plugin: 
                    # def version = sh (returnStdout: true, script: "grep 'version' package.json | cut -d '\"' -f4 | tr '\\n' '\\0'")
                    # env.IMAGE_NAME = "$version-$BUILD_NUMBER"
                }
            }
        }
        stage('Run tests') {
            steps {
               script {
                    # enter app directory, because that's where package.json and tests are located
                    dir("app") {
                        # install all dependencies needed for running tests
                        sh "npm install"
                        sh "npm run test"
                    } 
               }
            }
        }
        stage('Build and Push docker image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'USER', passwordVariable: 'PWD')]){
                    sh "docker build -t docker-hub-id/myapp:${IMAGE_NAME} ."
                    sh "echo ${PWD} | docker login -u ${USER} --password-stdin"
                    sh "docker push docker-hub-id/myapp:${IMAGE_NAME}"
                }
            }
        }
        stage('commit version update') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'gitlab-credentials', usernameVariable: 'USER', passwordVariable: 'PWD')]) {
                        # git config here for the first time run
                        sh 'git config --global user.email "rachanauniyal0417@gmail.com"'
                        sh 'git config --global user.name "rachana-uniyal"'

                        sh "git remote set-url origin https://${USER}:${PWD}@gitlab.com/rachana6/node-project.git"
                        sh 'git add .'
                        sh 'git commit -m "ci: version bump"'
                        sh 'git push origin HEAD:jenkins-jobs'
                    }
                }
            }
        }
    }
}

